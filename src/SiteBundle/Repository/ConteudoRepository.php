<?php

namespace SiteBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ConteudoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConteudoRepository extends \Doctrine\ORM\EntityRepository
{
    /**
    * Our new getAllPosts() method
    *
    * 1. Create & pass query to paginate method
    * 2. Paginate will return a `\Doctrine\ORM\Tools\Pagination\Paginator` object
    * 3. Return that object to the controller
    *
    * @param integer $pagina The current page (passed from controller)
    *
    * @return \Doctrine\ORM\Tools\Pagination\Paginator
    */
    public function getAllConteudo($pagina = 1, $limit = 5, $categoria = '')
    {
        // Create our query
        $builder = $this->createQueryBuilder('p')
                ->leftJoin('p.categoria', 'categoria')
                ->orderBy('p.id', 'DESC');
        
        $builder->where('p.ativo = 1');
        
        if($categoria <> '')
        {
            $builder
                ->andWhere('categoria.chave = :categoria')
                ->setParameter('categoria', $categoria);
        }
        
        $query      = $builder->getQuery();

        // No need to manually get the result ($query->getResult())

        $paginator = $this->paginate($query, $pagina, $limit);

        return $paginator;
    }
    
    /**
    * Paginator Helper
    *
    * Pass through a query object, current page & limit
    * the offset is calculated from the page and limit
    * returns an `Paginator` instance, which you can call the following on:
    *
    *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
    *     $paginator->count() # Count of ALL posts (ie: `20` posts)
    *     $paginator->getIterator() # ArrayIterator
    *
    * @param Doctrine\ORM\Query $dql   DQL Query Object
    * @param integer            $page  Current page (defaults to 1)
    * @param integer            $limit The total number per page (defaults to 5)
    *
    * @return \Doctrine\ORM\Tools\Pagination\Paginator
    */
    public function paginate($dql, $page = 1, $limit = 5)
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }
}
